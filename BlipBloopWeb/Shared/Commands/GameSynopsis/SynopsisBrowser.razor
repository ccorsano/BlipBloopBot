@using System.Linq;
@using Conceptoire.Twitch.API
@using Conceptoire.Twitch.Model
@using BlipBloopBot.Storage
@using BotServiceGrain
@using BotServiceGrainInterface.Model

@inject TwitchAPIClient TwitchClient
@inject IGameLocalizationStore LocStore
@inject IDialogService DialogService
@inject IClientProvider ClientProvider

<MudTable Context="category" ServerData="state => ServerReload(state)" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Categories</MudText>
        <MudToolBarSpacer />
        <MudSwitch Label="Customized only" T="bool" CheckedChanged="@OnToggleCustomized" />
        <LanguageSelect DefaultValue="@selectedLocale" OnSelectLocale="@(s => OnSelectLocale(s))" />
        <MudTextField Label="Filter" T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Category Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Source</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd><img src="@category.helixCategory.BoxArtUri" /></MudTd>
        <MudTd>@(category.gameInfo?.Name ?? category.helixCategory.Name)</MudTd>
        <MudTd>@if (category.customCategory != null) { <MudIcon Icon="@Icons.Outlined.Edit"/> } @((MarkupString) (category.customCategory?.Description ?? category.gameInfo?.Summary))</MudTd>
        <MudTd>@(category.gameInfo?.Source)</MudTd>
        <MudTd>
            @if (category.customCategory != null)
            {
                <MudIconButton Icon="@Icons.Rounded.Clear" OnClick="() => Clear(category)" />
            }
            <MudIconButton Icon="@Icons.Rounded.Edit" OnClick="() => Customize(category)" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [CascadingParameter(Name = "ServiceContext")]
    public MainLayout ServiceContext { get; set; }

    private MudTable<CustomCategoryViewModel> table;
    private string searchString;
    private string selectedLocale = "en";
    private bool filterCustomized = false;

    private CustomCategoryViewModel[] Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task<TableData<CustomCategoryViewModel>> ServerReload(TableState state)
    {
        var client = await ClientProvider.GetConnectedClient();
        var grain = client.GetGrain<IChannelGrain>(ServiceContext.UserId);
        var customCategories = await grain.GetCustomizedCategoryDescription();

        List<CustomCategoryViewModel> categoryList = new List<CustomCategoryViewModel>();
        await foreach (var category in TwitchClient.EnumerateTwitchCategoriesAsync(string.IsNullOrEmpty(searchString) ? "*" : searchString.ToLowerInvariant()))
        {
            var info = await LocStore.ResolveLocalizedGameInfoAsync(selectedLocale, category.Id);
            categoryList.Add(new CustomCategoryViewModel{
                gameInfo = info,
                helixCategory = category,
                customCategory = customCategories.FirstOrDefault(c => c.TwitchCategoryId == category.Id && c.Locale == selectedLocale)
            });
            if (categoryList.Count >= 10)
                break;
        }

        return new TableData<CustomCategoryViewModel>
        {
            Items = categoryList.ToArray(),
            TotalItems = categoryList.Count,
        };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void OnSelectLocale(string twitchLocale)
    {
        selectedLocale = twitchLocale;
        table.ReloadServerData();
    }

    private void OnToggleCustomized(bool toggle)
    {
        filterCustomized = toggle;
        table.ReloadServerData();
    }

    private async Task Clear(CustomCategoryViewModel info)
    {
        var client = await ClientProvider.GetConnectedClient();
        var grain = client.GetGrain<IChannelGrain>(ServiceContext.UserId);
        await grain.ClearCustomizedCategoryDescription(info.customCategory.TwitchCategoryId, info.customCategory.Locale);
    }

    private async Task Customize(CustomCategoryViewModel info)
    {
        DialogOptions options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("Category", info);
        var result = await DialogService.Show<CustomSynopsisEditDialog>("Customize", dialogParameters, options).Result;

        if (result.Cancelled)
        {
            return;
        }

        var description = (CustomCategoryDescription)result.Data;
        var client = await ClientProvider.GetConnectedClient();
        var grain = client.GetGrain<IChannelGrain>(ServiceContext.UserId);
        await grain.SetCustomizedCategoryDescription(description);
    }

}
