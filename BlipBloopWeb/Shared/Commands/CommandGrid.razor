@using System.Linq 
@using BotServiceGrain
@using Conceptoire.Twitch.Commands
@using Conceptoire.Twitch.Options
@using Microsoft.Extensions.DependencyInjection
@inject IClientProvider ClientProvider

<table class="table table-bordered ">
    <thead>
        <tr>
            <th scope="col"></th>
            <th scope="col">Trigger</th>
            <th scope="col">Command type</th>
            @*<th scope="col">Description</th>*@
            <th scope="col">Parameters</th>
        </tr>
    </thead>
    <tbody>
        @if (Commands != null)
        {
            @foreach (var options in Commands)
            {
                <CommandItem CommandName="@options.Name" CommandType="@options.Type" Parameters="@options.Parameters" CommandId="@options.Id" OnDelete="OnDelete" OnValidate="OnValidate" />
            }
            @if (NewItem != null)
            {
                <CommandItem CommandName="@NewItem.Name" CommandType="@NewItem.Type" Parameters="@NewItem.Parameters" CommandId="@NewItem.Id" />
            }
            else
            { 
                <tr>
                    <td><a class="btn btn-primary" @onclick="OnAdd"><i class="bi bi-plus-circle"></i></a></td>
                    <td></td>
                    <td></td>
                    @*<td></td>*@
                    <td></td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">
                    <div class="spinner-border m-5" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [CascadingParameter(Name = "ServiceContext")]
    public MainLayout ServiceContext { get; set; }

    public List<CommandItemModel> Commands { get; set; }
    private CommandItemModel NewItem { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var client = await ClientProvider.GetConnectedClient();
        var channelGrain = client.GetGrain<IChannelGrain>(ServiceContext.UserId);

        Commands = (await channelGrain.GetBotCommands()).Select(ToCommandItem).ToList();

        await base.OnParametersSetAsync();
    }

    protected void OnAdd()
    {
        Commands.Add(new CommandItemModel
        {
            Aliases = new List<string>(),
            Parameters = new Dictionary<string, string>(),
        });
    }

    protected async Task OnDelete(MouseEventArgs evt)
    {
        var client = await ClientProvider.GetConnectedClient();
        var channelGrain = client.GetGrain<IChannelGrain>(ServiceContext.UserId);

        Commands = (await channelGrain.GetBotCommands()).Select(ToCommandItem).ToList();
    }

    protected async Task OnValidate(MouseEventArgs evt)
    {
        var client = await ClientProvider.GetConnectedClient();
        var channelGrain = client.GetGrain<IChannelGrain>(ServiceContext.UserId);

        Commands = (await channelGrain.GetBotCommands()).Select(ToCommandItem).ToList();
    }

    protected CommandItemModel ToCommandItem(CommandOptions options) => new CommandItemModel
    {
        Id = options.Id,
        Name = options.Name,
        Aliases = options.Aliases?.ToList() ?? new List<string>(),
        Type = options.Type,
        Parameters = options.Parameters.ToDictionary(kvp => kvp.Key, kvp => kvp.Value),
    };
}
