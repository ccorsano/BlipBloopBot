@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using BotServiceGrain
@using Conceptoire.Twitch.Commands
@inject IClientProvider ClientProvider

<CascadingValue Name="ServiceContext" Value="this">

    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="() => { _drawerOpen = !_drawerOpen; }" />
            <MudAppBarSpacer />
            <TwitchLogin />
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>

</CascadingValue>

@code
{
    public bool IsAuthenticated { get; private set; }
    public bool IsChannelIntegrationActive { get; private set; }
    public bool IsBotRunning { get; private set; }
    public string UserName { get; private set; }
    public string UserId { get; private set; }
    public string OAuthToken { get; private set; }
    public string ActiveChannel { get; private set; }
    public CommandMetadata[] AvailableCommands { get; private set; }

    private bool _drawerOpen = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.HasClaim(c => c.Type == ClaimTypes.NameIdentifier))
        {
            UserId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
            UserName = authState.User.FindFirstValue("preferred_username");
            OAuthToken = authState.User.FindFirstValue("access_token");
            ActiveChannel = UserId;
            IsAuthenticated = true;

            var client = await ClientProvider.GetConnectedClient();
            var channelGrain = client.GetGrain<IChannelGrain>(UserId);
            AvailableCommands = (await channelGrain.GetSupportedCommandTypes()).ToArray();

            StateHasChanged();
        }

        await base.OnInitializedAsync();
    }

    public void SetActiveChannel(string activeChannel)
    {
        if (ActiveChannel != activeChannel)
        {
            ActiveChannel = activeChannel;
            StateHasChanged();
        }
    }

    public void SetAuthenticated(bool value)
    {
        if (IsAuthenticated ^ value)
        {
            IsAuthenticated = value;
            StateHasChanged();
        }
    }

    public void SetChannelIntegrationActive(bool value)
    {
        if (IsChannelIntegrationActive ^ value)
        {
            IsChannelIntegrationActive = value;
            StateHasChanged();
        }
    }

    public void SetBotRunning(bool value)
    {
        if (IsBotRunning ^ value)
        {
            IsBotRunning = value;
            StateHasChanged();
        }
    }
}