@using BotServiceGrain
@using Conceptoire.Twitch.API
@inject TwitchAPIClient twitchApiClient
@inject IClientProvider ClientProvider

<div class="card">
    <div class="card-header">
        Bot Account management
    </div>
    <div class="card-body">
        <h5 class="card-title">Enable as Bot account</h5>
        <p>
            You can allow specific channels to use this account as a bot.
            <br />
            In that case, this account login information will be used to read and post from the enabled chat, if the broadcaster selects this account as bot.
        </p>
        <h6>Currently allowed channels</h6>

        @if (_isLoadingAllowList)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else if (!_allowedChannels.Any())
        {
            <div class="alert alert-secondary" role="alert">
                No channels are allowed to use your account as a bot.
            </div>
        }
        else
        {
            <div class="row row-cols-8 row-cols-md-6 g-4">
                @foreach (var channel in _allowedChannels)
                {
                    <div class="col">
                        <div class="card h-100">
                            <img src="@channel.ProfileImageUrl" class="card-img-top" alt="@channel.DisplayName">
                            <div class="card-body">
                                <h5 class="card-title">@channel.DisplayName</h5>
                                <p class="card-text">@channel.Description</p>
                                <a href="#" @onclick="(_) =>RevokeChannel(channel.Id)" class="btn btn-primary bi bi-trash-fill">Revoke</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        <label for="channelSearch" class="form-label">Search channel to allow</label>
        <div class="input-group mb-3">
            <span class="input-group-text" id="basic-addon3">Twitch channel</span>
            <input type="text" class="form-control" @bind="_channelSearch" @oninput="SearchChannel" id="channelSearch" aria-describedby="basic-addon3" />
        </div>

        @if (_searchResults != null)
        {
            <div class="row row-cols-8 row-cols-md-6 g-4">
                @foreach (var user in _searchResults)
                {
                    <div class="col">
                        <div class="card" style="width: 18rem;">
                            <img src="@user.ProfileImageUrl" class="card-img-top" alt="@user.DisplayName">
                            <div class="card-body">
                                <h5 class="card-title">@user.DisplayName</h5>
                                <p class="card-text">@user.Description</p>
                                <a href="#" @onclick="(_) => SelectChannel(user)" class="btn btn-primary">Allow</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code{
    [CascadingParameter(Name = "ServiceContext")]
    public MainLayout ServiceContext { get; set; }

    private HelixUsersGetResult[] _allowedChannels = new HelixUsersGetResult[0];

    private bool _isLoadingAllowList = true;
    private string _channelSearch;
    private HelixUsersGetResult[] _searchResults;

    protected override async Task OnParametersSetAsync()
    {
        var client = await ClientProvider.GetConnectedClient();
        var grain = client.GetGrain<IUserGrain>(ServiceContext.UserId);
        await RefreshChannels(grain);
        await base.OnParametersSetAsync();
    }

    private async Task RefreshChannels(IUserGrain grain)
    {
        _isLoadingAllowList = true;
        var allowedChannels = await grain.GetChannelBotAllowList();

        if (allowedChannels.Length == 0)
        {
            _allowedChannels = new HelixUsersGetResult[0];
        }
        else
        { 
            _allowedChannels = await twitchApiClient.GetUsersByIdAsync(allowedChannels.Select(c => c.BroadcasterId));
        }

        _isLoadingAllowList = false;
    }

    private async Task SearchChannel(ChangeEventArgs evt)
    {
        _channelSearch = evt.Value as string;
        if (_channelSearch.Length < 3)
        {
            _searchResults = new HelixUsersGetResult[0];
            return;
        }
        _searchResults = await twitchApiClient.GetUsersByLoginAsync(new string[] { _channelSearch });
    }

    private async Task SelectChannel(HelixUsersGetResult channel)
    {
        _searchResults = null;
        _channelSearch = "";

        var client = await ClientProvider.GetConnectedClient();
        var grain = client.GetGrain<IUserGrain>(ServiceContext.UserId);
        await grain.AllowAsBot(channel.Id);
        await RefreshChannels(grain);
    }

    private async Task RevokeChannel(string channelId)
    {
        var client = await ClientProvider.GetConnectedClient();
        var grain = client.GetGrain<IUserGrain>(ServiceContext.UserId);
        await grain.RevokeAsBot(channelId);
        await RefreshChannels(grain);
    }

}
