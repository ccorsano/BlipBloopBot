@using BotServiceGrain
@using Conceptoire.Twitch.API
@inject TwitchAPIClient twitchApiClient
@inject IClientProvider ClientProvider

<MudCard>
    <MudCardHeader>
        Bot Account management
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.h5">
            Enable as Bot account
        </MudText>
        <MudText>
            You can allow specific channels to use this account as a bot.
            <br />
            In that case, this account login information will be used to read and post from the enabled chat, if the broadcaster selects this account as bot.
        </MudText>
        <MudText Typo="Typo.h6">Currently allowed channels</MudText>

        @if (_isLoadingAllowList)
        {
            <MudProgressLinear Indeterminate="true"></MudProgressLinear>
        }
        else if (!_allowedChannels.Any())
        {
            <MudItem>
                No channels are allowed to use your account as a bot.
            </MudItem>
        }
        else
        {
            <MudGrid xs="8">
                @foreach (var channel in _allowedChannels)
                {
                <MudCard>
                    <MudCardMedia Image="@channel.ProfileImageUrl.AbsoluteUri" Title="@channel.DisplayName" />
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@channel.DisplayName</MudText>
                        <MudText Typo="Typo.body2">@channel.Description</MudText>
                        <MudIconButton OnClick="(_) =>RevokeChannel(channel.Id)" Icon="@Icons.Filled.Delete"></MudIconButton>
                    </MudCardContent>

                </MudCard>
                }
            </MudGrid>
        }
    </MudCardContent>
</MudCard>

@code{
    [CascadingParameter(Name = "ServiceContext")]
    public MainLayout ServiceContext { get; set; }

    private HelixUsersGetResult[] _allowedChannels = new HelixUsersGetResult[0];

    private bool _isLoadingAllowList = true;
    private string _channelSearch;
    private HelixUsersGetResult[] _searchResults;

    protected override async Task OnParametersSetAsync()
    {
        var client = await ClientProvider.GetConnectedClient();
        var grain = client.GetGrain<IUserGrain>(ServiceContext.UserId);
        await RefreshChannels(grain);
        await base.OnParametersSetAsync();
    }

    private async Task RefreshChannels(IUserGrain grain)
    {
        _isLoadingAllowList = true;
        var allowedChannels = await grain.GetChannelBotAllowList();

        if (allowedChannels.Length == 0)
        {
            _allowedChannels = new HelixUsersGetResult[0];
        }
        else
        { 
            _allowedChannels = await twitchApiClient.GetUsersByIdAsync(allowedChannels.Select(c => c.BroadcasterId));
        }

        _isLoadingAllowList = false;
    }

    private async Task SearchChannel(ChangeEventArgs evt)
    {
        _channelSearch = evt.Value as string;
        if (_channelSearch.Length < 3)
        {
            _searchResults = new HelixUsersGetResult[0];
            return;
        }
        _searchResults = await twitchApiClient.GetUsersByLoginAsync(new string[] { _channelSearch });
    }

    private async Task SelectChannel(HelixUsersGetResult channel)
    {
        _searchResults = null;
        _channelSearch = "";

        var client = await ClientProvider.GetConnectedClient();
        var grain = client.GetGrain<IUserGrain>(ServiceContext.UserId);
        await grain.AllowAsBot(channel.Id);
        await RefreshChannels(grain);
    }

    private async Task RevokeChannel(string channelId)
    {
        var client = await ClientProvider.GetConnectedClient();
        var grain = client.GetGrain<IUserGrain>(ServiceContext.UserId);
        await grain.RevokeAsBot(channelId);
        await RefreshChannels(grain);
    }

}
