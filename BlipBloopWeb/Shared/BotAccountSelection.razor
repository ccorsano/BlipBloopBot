@using BotServiceGrain
@using BotServiceGrainInterface.Model
@inject IClientProvider ClientProvider

<MudPaper>
    @if (ServiceContext.IsBotRunning)
    {
    <MudContainer>
        Using
        <MudChip>@_selectedBotAccount?.UserLogin</MudChip>
        as a bot. Stop the bot service to change.
    </MudContainer>
    }
    else
    {
        <MudText Typo="Typo.h5">
            Bot Account Selection
        </MudText>
        <MudSelect T="BotAccountInfo" Label="Bot account selection" Value="_selectedBotAccount" ValueChanged="OnSelect">
            @foreach (var botAccount in _botAccounts)
            {
                <MudSelectItem T="BotAccountInfo" Value="@botAccount">@botAccount.UserLogin</MudSelectItem>
            }
        </MudSelect>
    }
</MudPaper>

@code {
    [CascadingParameter(Name = "ServiceContext")]
    public MainLayout ServiceContext { get; set; }

    private BotAccountInfo[] _botAccounts = new BotAccountInfo[0];
    private BotAccountInfo _selectedBotAccount;
    private string _botUserId;

    private IChannelGrain _channelGrain;

    protected override async Task OnParametersSetAsync()
    {
        var client = await ClientProvider.GetConnectedClient();
        _channelGrain = client.GetGrain<IChannelGrain>(ServiceContext.ActiveChannel.BroadcasterId);

        _botAccounts = await _channelGrain.GetAllowedBotAccounts();
        _selectedBotAccount = _botAccounts.FirstOrDefault(b => b.IsActive) ?? _botAccounts.First();
        
        await base.OnParametersSetAsync();
    }

    protected async Task OnSelect(BotAccountInfo selectedBot)
    {
        var client = await ClientProvider.GetConnectedClient();
        _channelGrain = client.GetGrain<IChannelGrain>(ServiceContext.ActiveChannel.BroadcasterId);

        await _channelGrain.SetActiveBotAccount(selectedBot.UserId);
        _selectedBotAccount = selectedBot;
    }

}
