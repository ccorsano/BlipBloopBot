@using BotServiceGrain
@using BotServiceGrainInterface.Model
@inject IClientProvider ClientProvider

<MudPaper>
    <MudText Typo="Typo.h5">
        Bot Account Selection
    </MudText>
    <MudSelect T="BotAccountInfo" Label="Bot command type selection" Disabled="ServiceContext.IsBotRunning">
        @foreach (var botAccount in _botAccounts)
        {
            <MudSelectItem T="BotAccountInfo" Value="@botAccount">@botAccount.UserLogin</MudSelectItem>
        }
    </MudSelect>
</MudPaper>

@code {
    [CascadingParameter(Name = "ServiceContext")]
    public MainLayout ServiceContext { get; set; }

    private BotAccountInfo[] _botAccounts = new BotAccountInfo[0];
    private string _botUserId;

    private IChannelGrain _channelGrain;

    protected override async Task OnParametersSetAsync()
    {
        var client = await ClientProvider.GetConnectedClient();
        _channelGrain = client.GetGrain<IChannelGrain>(ServiceContext.ActiveChannel.BroadcasterId);

        _botAccounts = await _channelGrain.GetAllowedBotAccounts();

        await base.OnParametersSetAsync();
    }

    protected async Task OnSelect(ChangeEventArgs evt)
    {
        _botUserId = evt.Value as string;

        var client = await ClientProvider.GetConnectedClient();
        _channelGrain = client.GetGrain<IChannelGrain>(ServiceContext.ActiveChannel.BroadcasterId);

        await _channelGrain.SetActiveBotAccount(_botUserId);
    }

}
