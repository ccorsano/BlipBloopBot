@using BotServiceGrain
@using Conceptoire.Twitch.API
@inject IClientProvider ClientProvider

<MudText Typo="Typo.h6">Staff</MudText>

<MudGrid>
    <MudItem xs="6">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>Editors</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudList>
                    @foreach (var editor in _channelEditors)
                    {
                        <MudListItem Icon="@Icons.Filled.Person">@editor.UserName</MudListItem>
                    }
                </MudList>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem  xs="6">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>Moderators</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudList>
                    @foreach (var moderator in _channelModerators)
                    {
                        <MudListItem Icon="@Icons.Filled.Person">@moderator.UserName</MudListItem>
                    }
                </MudList>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public string ChannelId { get; set; }

    private List<HelixChannelEditor> _channelEditors = new List<HelixChannelEditor>();
    private List<HelixChannelModerator> _channelModerators = new List<HelixChannelModerator>();

    protected override async Task OnParametersSetAsync()
    {
        var client = await ClientProvider.GetConnectedClient();
        var channelGrain = client.GetGrain<IChannelGrain>(ChannelId);

        var staff = await channelGrain.GetStaff();
        _channelEditors.Clear();
        _channelEditors.AddRange(staff.Editors);
        _channelModerators.Clear();
        _channelModerators.AddRange(staff.Moderators);

        await base.OnParametersSetAsync();
    }

}
