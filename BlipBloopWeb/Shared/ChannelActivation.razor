@using BlipBloopWeb
@using BotServiceGrain
@inject IClientProvider ClientProvider

<h3>Channel Activation</h3>

<div>
    <h4>Integration status</h4>

    @if (_isLoading)
    {
        <div class="spinner-border m-5" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else if (_hasActiveChannel)
    {
        <h5>
            <i class="bi bi-check2-square bi-lg green" style="font-size: 2rem; color: forestgreen;"></i>
            Channel integration is active.
        </h5>

        <ChannelStaffList ChannelId="@ServiceContext.UserId" />
    }
    else
    {
        <a class="btn btn-primary btn-lg" @onclick="ActivateChannelAsync">Activate channel integration</a>
    }
</div>

@code {
    [CascadingParameter(Name = "ServiceContext")]
    public MainLayout ServiceContext { get; set; }

    private bool _isLoading = true;
    private bool _hasActiveChannel = false;
    private IUserGrain _userGrain;

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var client = await ClientProvider.GetConnectedClient();

        _userGrain = client.GetGrain<IUserGrain>(ServiceContext.UserId);
        await _userGrain.SetOAuthToken(ServiceContext.OAuthToken);
        _hasActiveChannel = await _userGrain.HasActiveChannel();

        _isLoading = false;

        await base.OnParametersSetAsync();
    }

    protected async Task ActivateChannelAsync()
    {
        await _userGrain.ActivateChannel();
        _hasActiveChannel = await _userGrain.HasActiveChannel();
    }
}
