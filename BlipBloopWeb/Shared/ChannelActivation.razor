@using BlipBloopWeb
@using BotServiceGrain
@inject IClientProvider ClientProvider

    <div class="card">
        <div class="card-header">
            Channel Activation
        </div>
        <div class="card-body">
            @if (_isLoading)
            {
                <div class="spinner-border m-5" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else if (ServiceContext.IsChannelIntegrationActive)
            {
                <h5>
                    <i class="bi bi-check2-square bi-lg green" style="font-size: 2rem; color: forestgreen;"></i>
                    Channel integration is active.
                </h5>

                <ChannelStaffList ChannelId="@ServiceContext.UserId" />
            }
            else
            {
                <h5>
                    <i class="bi bi-x-square bi-lg" style="font-size: 2rem; color: black;"></i>
                    Channel integration is inactive.
                </h5>
                <a class="btn btn-primary btn-lg" @onclick="ActivateChannelAsync">Activate channel integration</a>
            }
        </div>
    </div>

@code {
    [CascadingParameter(Name = "ServiceContext")]
    public MainLayout ServiceContext { get; set; }

    private bool _isLoading = true;
    private IUserGrain _userGrain;

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var client = await ClientProvider.GetConnectedClient();

        _userGrain = client.GetGrain<IUserGrain>(ServiceContext.UserId);
        await _userGrain.SetOAuthToken(ServiceContext.OAuthToken);
        ServiceContext.SetChannelIntegrationActive(await _userGrain.HasActiveChannel());

        _isLoading = false;

        await base.OnParametersSetAsync();
    }

    protected async Task ActivateChannelAsync()
    {
        await _userGrain.ActivateChannel();
        ServiceContext.SetChannelIntegrationActive(await _userGrain.HasActiveChannel());
    }
}
